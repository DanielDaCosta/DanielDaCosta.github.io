<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://danieldacosta.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://danieldacosta.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-08T23:03:00+00:00</updated><id>https://danieldacosta.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Set Up MLflow on AWS EC2 Using Docker, S3, and RDS</title><link href="https://danieldacosta.github.io/blog/2021/mlflow/" rel="alternate" type="text/html" title="Set Up MLflow on AWS EC2 Using Docker, S3, and RDS"/><published>2021-10-18T17:39:00+00:00</published><updated>2021-10-18T17:39:00+00:00</updated><id>https://danieldacosta.github.io/blog/2021/mlflow</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2021/mlflow/"><![CDATA[<p>If you are a data scientist, you definitely have felt the need to keep track of your machine learning models. If you are not careful, you can quickly lose track of the best model you have been tuning for hours.</p> <p>Numerous platforms can help you deal with this issue. In this post, we will focus on the open-source project called MLflow and how we implemented it to make our model training efforts more efficient.</p> <p>According to <a href="https://www.mlflow.org/docs/latest/index.html">MLflow’s documentation</a>:</p> <blockquote> <p>MLflow is an open source platform for managing the end-to-end machine learning lifecycle.</p> </blockquote> <p>The platform facilitates workflow management for training, tracking, and producing machine learning models.</p> <p>This post will not focus on what is MLflow and why you should use it because countless websites already explain that. Here, we will implement it on AWS using technologies, such as Docker, ECR, and EC2. We assume that you are already familiar with them.</p> <p>In the end, you will access and use the MLflow UI hosted on a remote server.</p> <hr/> <p>You can check the full blog post on my Medium: <a href="https://aws.plainenglish.io/set-up-mlflow-on-aws-ec2-using-docker-s3-and-rds-90d96798e555">Set Up MLflow on AWS EC2 Using Docker, S3, and RDS</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Implementation of MLflow to make model training efforts more efficient.]]></summary></entry><entry><title type="html">Set up MLflow on AWS EC2 using Docker, S3, and RDS</title><link href="https://danieldacosta.github.io/blog/2021/set-up-mlflow-on-aws-ec2-using-docker-s3-and-rds/" rel="alternate" type="text/html" title="Set up MLflow on AWS EC2 using Docker, S3, and RDS"/><published>2021-10-18T12:59:12+00:00</published><updated>2021-10-18T12:59:12+00:00</updated><id>https://danieldacosta.github.io/blog/2021/set-up-mlflow-on-aws-ec2-using-docker-s3-and-rds</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2021/set-up-mlflow-on-aws-ec2-using-docker-s3-and-rds/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Building an ETL pipeline with Airflow and ECS</title><link href="https://danieldacosta.github.io/blog/2020/etl-airflow/" rel="alternate" type="text/html" title="Building an ETL pipeline with Airflow and ECS"/><published>2020-12-20T21:01:00+00:00</published><updated>2020-12-20T21:01:00+00:00</updated><id>https://danieldacosta.github.io/blog/2020/etl-airflow</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2020/etl-airflow/"><![CDATA[<p>ETL is an automated process that takes raw data, extracts and transforms the information required for analysis, and loads it to a data warehouse. There are different ways to build your ETL pipeline, on this post we’ll be using three main tools:</p> <ul> <li><strong>Airflow</strong>: one of the most powerful platforms used by Data Engineers for orchestrating workflows.</li> <li><strong>AWS ECS/Fargate</strong>: a container management service that makes it easy to run, stop, and manage your containers.</li> <li><strong>AWS s3</strong>: AWS simple storage service.</li> </ul> <p>The architecture that we will be building follows the schema bellow:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/ETL_architecture.png" alt="" title="ETL Architecture"/> </div> </div> <div class="caption"> Architecture schema, using AWS, Docker and Airflow. Designed using Lucid.app </div> <hr/> <p>You can check the full blog post on my Medium at Towards Data Science: <a href="https://towardsdatascience.com/building-an-etl-pipeline-with-airflow-and-ecs-4f68b7aa3b5b">Building an ETL pipeline with Airflow and ECS</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[ETL is an automated process that takes raw data, extracts and transforms the information required for analysis, and loads it to a data warehouse.]]></summary></entry><entry><title type="html">Building an ETL pipeline with Airflow and ECS</title><link href="https://danieldacosta.github.io/blog/2020/building-an-etl-pipeline-with-airflow-and-ecs/" rel="alternate" type="text/html" title="Building an ETL pipeline with Airflow and ECS"/><published>2020-12-20T20:17:42+00:00</published><updated>2020-12-20T20:17:42+00:00</updated><id>https://danieldacosta.github.io/blog/2020/building-an-etl-pipeline-with-airflow-and-ecs</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2020/building-an-etl-pipeline-with-airflow-and-ecs/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Going Bastion-less: Accessing Private EC2 instance with Session Manager</title><link href="https://danieldacosta.github.io/blog/2020/going-bastion-less-accessing-private-ec2-instance-with-session-manager/" rel="alternate" type="text/html" title="Going Bastion-less: Accessing Private EC2 instance with Session Manager"/><published>2020-11-03T00:23:16+00:00</published><updated>2020-11-03T00:23:16+00:00</updated><id>https://danieldacosta.github.io/blog/2020/going-bastion-less-accessing-private-ec2-instance-with-session-manager</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2020/going-bastion-less-accessing-private-ec2-instance-with-session-manager/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Going Bastion-less - Accessing Private EC2 instance with Session Manager</title><link href="https://danieldacosta.github.io/blog/2020/bastionless/" rel="alternate" type="text/html" title="Going Bastion-less - Accessing Private EC2 instance with Session Manager"/><published>2020-11-02T00:00:00+00:00</published><updated>2020-11-02T00:00:00+00:00</updated><id>https://danieldacosta.github.io/blog/2020/bastionless</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2020/bastionless/"><![CDATA[<p>In this post we will set up a private EC2 instance (in a private subnet), and use SSM session manager to access the instance that hosts a Jupyter Notebook server. We will then use PostForwarding with AWS Session Manager to access our server from our local machine.</p> <p>We’ll set up this infrastructure without opening inbound ports or setting up bastion hosts or managing SSH keys!.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/bastionless.png" alt="" title="Bastion-less Architecture"/> </div> </div> <div class="caption"> Bastion Host architecture in order to access the private instance. Designed using Lucid.app </div> <hr/> <p>You can check the full blog post on my Medium at Towards Data Science: <a href="https://towardsdatascience.com/going-bastion-less-accessing-private-ec2-instance-with-session-manager-c958cbf8489f">Going Bastion-less: Accessing Private EC2 instance with Session Manager</a></p> ]]></content><author><name></name></author><summary type="html"><![CDATA[In this post we will set up a private EC2 instance (in a private subnet), and use SSM session manager to access the instance that hosts a Jupyter Notebook server.]]></summary></entry><entry><title type="html">Discord notification using CloudWatch Alarms, SNS and AWS Lambda</title><link href="https://danieldacosta.github.io/blog/2020/discord-notification-using-cloudwatch-alarms-sns-and-aws-lambda/" rel="alternate" type="text/html" title="Discord notification using CloudWatch Alarms, SNS and AWS Lambda"/><published>2020-09-12T22:06:38+00:00</published><updated>2020-09-12T22:06:38+00:00</updated><id>https://danieldacosta.github.io/blog/2020/discord-notification-using-cloudwatch-alarms-sns-and-aws-lambda</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2020/discord-notification-using-cloudwatch-alarms-sns-and-aws-lambda/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Discord notification using CloudWatch Alarms, SNS and AWS Lambda</title><link href="https://danieldacosta.github.io/blog/2020/notifications/" rel="alternate" type="text/html" title="Discord notification using CloudWatch Alarms, SNS and AWS Lambda"/><published>2020-09-12T15:12:00+00:00</published><updated>2020-09-12T15:12:00+00:00</updated><id>https://danieldacosta.github.io/blog/2020/notifications</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2020/notifications/"><![CDATA[<p>Alarms exist to notify us when our system behaves in an unexpected way, which warrants manual intervention to correct. When we have multiple systems in a production environment and an error passes unnoticed, the consequences can be catastrophic.</p> <p>An alarm should be created when the system cannot automatically recover, and human intervention is required. If an alert happens to occur too frequently it might lead to longer response time or even get missed.</p> <p>In this article, we will be building an alarm notification pipeline for an AWS Lambda function. For that will be using 3 AWS Services: AWS Lambda, Simple Notification Service (SNS), and CloudWatch. The goal is to send a notification to a Discord Channel when a CloudWatch Alarm is triggered.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/notifications.png" alt="" title="SNS Notifications Architecture"/> </div> </div> <div class="caption"> Designed using Lucidchart: https://www.lucidchart.com </div> <hr/> <p>You can check the full blog post on my Medium at Towards Data Science: <a href="https://towardsdatascience.com/discord-notification-using-cloudwatch-alarms-sns-and-aws-lambda-71393861699f">Discord notification using CloudWatch Alarms, SNS and AWS Lambda</a></p> ]]></content><author><name></name></author><summary type="html"><![CDATA[Alarms exist to notify us when our system behaves in an unexpected way, which warrants manual intervention to correct.]]></summary></entry><entry><title type="html">Automating Lambda modules deployment with GitLab CI</title><link href="https://danieldacosta.github.io/blog/2020/automating-lambda-modules-deployment-with-gitlab-ci/" rel="alternate" type="text/html" title="Automating Lambda modules deployment with GitLab CI"/><published>2020-08-09T16:17:20+00:00</published><updated>2020-08-09T16:17:20+00:00</updated><id>https://danieldacosta.github.io/blog/2020/automating-lambda-modules-deployment-with-gitlab-ci</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2020/automating-lambda-modules-deployment-with-gitlab-ci/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Automating Lambda modules deployment with GitLab CI</title><link href="https://danieldacosta.github.io/blog/2020/gitlabci/" rel="alternate" type="text/html" title="Automating Lambda modules deployment with GitLab CI"/><published>2020-08-09T15:59:00+00:00</published><updated>2020-08-09T15:59:00+00:00</updated><id>https://danieldacosta.github.io/blog/2020/gitlabci</id><content type="html" xml:base="https://danieldacosta.github.io/blog/2020/gitlabci/"><![CDATA[<p>While working with terraform lambda modules, I had a hard time finding out the best repository architecture to automate my lambdas deployment. I couldn’t find any article that I could use as a guideline, that’s why I’m writing this article.</p> <p>While working on big projects, project organization is a must-have. In this story, you will be presented to one way to organize your repositories so that it facilitates the deployment procedure, making it much more scalable.</p> <p>In this article, we’ll be building the following repositories architecture:</p> <ul> <li><strong>Lambda-Module</strong>: Repository containing the Terraform Lambda module.</li> <li><strong>Lambda-Infra</strong>: Repository containing Terraform code for deployment into AWS.</li> <li><strong>Lambda-Code</strong>: Repository containing the lambda code for deployment using Gitlab-CI.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/gitlab-ci.jpg" alt="" title="GItlab-ci Image"/> </div> </div> <div class="caption"> Photo by Sai Kiran Anagani on Unsplash </div> <hr/> <p>You can check the full blog post on my Medium at Towards Data Science: <a href="https://towardsdatascience.com/automating-lambda-modules-deployment-with-gitlab-ci-b34cc58a7ac0">Automating Lambda modules deployment with GitLab CI</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[In this story, you will be presented to one way to organize your repositories so that it facilitates the deployment procedure, making it much more scalable.]]></summary></entry></feed>